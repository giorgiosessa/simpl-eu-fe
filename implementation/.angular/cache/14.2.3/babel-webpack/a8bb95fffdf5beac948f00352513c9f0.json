{"ast":null,"code":"/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n(function (root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    module.exports = factory();\n  } else {\n    root.ttl2jsonld = factory();\n  }\n})(this, function () {\n  \"use strict\";\n\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  peg$SyntaxError.buildMessage = function (expected, found) {\n    var DESCRIBE_EXPECTATION_FNS = {\n      literal: function (expectation) {\n        return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n      },\n      \"class\": function (expectation) {\n        var escapedParts = \"\",\n            i;\n\n        for (i = 0; i < expectation.parts.length; i++) {\n          escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n        }\n\n        return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n      },\n      any: function (expectation) {\n        return \"any character\";\n      },\n      end: function (expectation) {\n        return \"end of input\";\n      },\n      other: function (expectation) {\n        return expectation.description;\n      }\n    };\n\n    function hex(ch) {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s) {\n      return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n        return '\\\\x0' + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return '\\\\x' + hex(ch);\n      });\n    }\n\n    function classEscape(s) {\n      return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n        return '\\\\x0' + hex(ch);\n      }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n        return '\\\\x' + hex(ch);\n      });\n    }\n\n    function describeExpectation(expectation) {\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n    }\n\n    function describeExpected(expected) {\n      var descriptions = new Array(expected.length),\n          i,\n          j;\n\n      for (i = 0; i < expected.length; i++) {\n        descriptions[i] = describeExpectation(expected[i]);\n      }\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found) {\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  };\n\n  function peg$parse(input, options) {\n    options = options !== void 0 ? options : {};\n\n    var peg$FAILED = {},\n        peg$startRuleFunctions = {\n      turtleDoc: peg$parseturtleDoc\n    },\n        peg$startRuleFunction = peg$parseturtleDoc,\n        peg$c0 = function (statements) {\n      var jsonld = context.toJSON();\n      jsonld[\"@graph\"] = [];\n      statements.filter(a => Array.isArray(a)).forEach(a => {\n        a.forEach(b => {\n          jsonld[\"@graph\"].push(b);\n        });\n      });\n\n      if (jsonld[\"@graph\"].length === 1) {\n        Object.assign(jsonld, jsonld[\"@graph\"][0]);\n        delete jsonld[\"@graph\"];\n      }\n\n      return jsonld;\n    },\n        peg$c1 = \".\",\n        peg$c2 = peg$literalExpectation(\".\", false),\n        peg$c3 = function (a) {\n      return a;\n    },\n        peg$c4 = \"#\",\n        peg$c5 = peg$literalExpectation(\"#\", false),\n        peg$c6 = /^[^\\n]/,\n        peg$c7 = peg$classExpectation([\"\\n\"], true, false),\n        peg$c8 = \"\\n\",\n        peg$c9 = peg$literalExpectation(\"\\n\", false),\n        peg$c10 = function (a) {\n      return a.join(\"\");\n    },\n        peg$c11 = \"@prefix\",\n        peg$c12 = peg$literalExpectation(\"@prefix\", false),\n        peg$c13 = function (a, b) {\n      context.addPrefix(a === \"\" ? \"0\" : a, b);\n      return {};\n    },\n        peg$c14 = \"@base\",\n        peg$c15 = peg$literalExpectation(\"@base\", false),\n        peg$c16 = function (a) {\n      context.addBase(a);\n      return {};\n    },\n        peg$c17 = /^[Bb]/,\n        peg$c18 = peg$classExpectation([\"B\", \"b\"], false, false),\n        peg$c19 = /^[Aa]/,\n        peg$c20 = peg$classExpectation([\"A\", \"a\"], false, false),\n        peg$c21 = /^[Ss]/,\n        peg$c22 = peg$classExpectation([\"S\", \"s\"], false, false),\n        peg$c23 = /^[Ee]/,\n        peg$c24 = peg$classExpectation([\"E\", \"e\"], false, false),\n        peg$c25 = /^[Pp]/,\n        peg$c26 = peg$classExpectation([\"P\", \"p\"], false, false),\n        peg$c27 = /^[Rr]/,\n        peg$c28 = peg$classExpectation([\"R\", \"r\"], false, false),\n        peg$c29 = /^[Ff]/,\n        peg$c30 = peg$classExpectation([\"F\", \"f\"], false, false),\n        peg$c31 = /^[Ii]/,\n        peg$c32 = peg$classExpectation([\"I\", \"i\"], false, false),\n        peg$c33 = /^[Xx]/,\n        peg$c34 = peg$classExpectation([\"X\", \"x\"], false, false),\n        peg$c35 = function (s, p) {\n      var x = {};\n      if (typeof s === 'string' && s !== '[]') x[\"@id\"] = s;else if (typeof s === 'object') Object.assign(x, s);\n      if (p) Object.assign(x, p);\n      return [x];\n    },\n        peg$c36 = function (s, p) {\n      var x = {};\n      if (s) Object.assign(x, s);\n      if (p) Object.assign(x, p);\n      return [x];\n    },\n        peg$c37 = \";\",\n        peg$c38 = peg$literalExpectation(\";\", false),\n        peg$c39 = function (a, b, e, f) {\n      var x = {};\n      x[e] = f;\n      return x;\n    },\n        peg$c40 = function (a, b, d) {\n      return d;\n    },\n        peg$c41 = function (a, b, c) {\n      var x = {};\n      c.unshift(createObject(a, b));\n      c.forEach(t => {\n        if (!t) return;\n        Object.keys(t).forEach(key => {\n          t[key].forEach(val => {\n            if (key === \"@type\" && val[\"@id\"] !== undefined) val = val[\"@id\"];\n            if (x[key] === undefined) x[key] = val;else if (Array.isArray(x[key])) x[key].push(val);else x[key] = [x[key], val];\n          });\n        });\n      });\n      return x;\n    },\n        peg$c42 = \",\",\n        peg$c43 = peg$literalExpectation(\",\", false),\n        peg$c44 = function (a, c) {\n      return c;\n    },\n        peg$c45 = function (a, b) {\n      b.unshift(a);\n      return b;\n    },\n        peg$c46 = \"a\",\n        peg$c47 = peg$literalExpectation(\"a\", false),\n        peg$c48 = function () {\n      return '@type';\n    },\n        peg$c49 = function (a) {\n      return expandList(a, true);\n    },\n        peg$c50 = function (a) {\n      return expandList(a, false);\n    },\n        peg$c51 = function (a) {\n      return a === \"[]\" ? {} : {\n        \"@id\": a\n      };\n    },\n        peg$c52 = function (a) {\n      return {\n        \"@id\": a\n      };\n    },\n        peg$c53 = \"[\",\n        peg$c54 = peg$literalExpectation(\"[\", false),\n        peg$c55 = \"]\",\n        peg$c56 = peg$literalExpectation(\"]\", false),\n        peg$c57 = \"(\",\n        peg$c58 = peg$literalExpectation(\"(\", false),\n        peg$c59 = \")\",\n        peg$c60 = peg$literalExpectation(\")\", false),\n        peg$c61 = function (a) {\n      return {\n        \"@list\": a\n      };\n    },\n        peg$c62 = function (a, b) {\n      return {\n        \"@value\": a,\n        \"@language\": b\n      };\n    },\n        peg$c63 = \"^^\",\n        peg$c64 = peg$literalExpectation(\"^^\", false),\n        peg$c65 = function (a, b) {\n      if (b === \"http://www.w3.org/2001/XMLSchema#boolean\" && a === \"true\") return true;\n      if (b === \"http://www.w3.org/2001/XMLSchema#boolean\" && a === \"false\") return false;\n      if (b === \"http://www.w3.org/2001/XMLSchema#integer\") return parseInt(a);\n      if (b === \"http://www.w3.org/2001/XMLSchema#double\") return parseFloat(a);\n      const uri = context.resolve(b, true);\n\n      if (uri) {\n        const prefix = b.split(\":\")[0];\n\n        if (uri === \"http://www.w3.org/2001/XMLSchema#boolean\" && a === \"true\") {\n          context.decrement(prefix);\n          return true;\n        }\n\n        if (uri === \"http://www.w3.org/2001/XMLSchema#boolean\" && a === \"false\") {\n          context.decrement(prefix);\n          return false;\n        }\n\n        if (uri === \"http://www.w3.org/2001/XMLSchema#integer\") {\n          context.decrement(prefix);\n          return parseInt(a);\n        }\n\n        if (uri === \"http://www.w3.org/2001/XMLSchema#double\") {\n          context.decrement(prefix);\n          return parseFloat(a);\n        }\n      }\n\n      return {\n        \"@value\": a,\n        \"@type\": b\n      };\n    },\n        peg$c66 = \"true\",\n        peg$c67 = peg$literalExpectation(\"true\", false),\n        peg$c68 = function () {\n      return true;\n    },\n        peg$c69 = \"false\",\n        peg$c70 = peg$literalExpectation(\"false\", false),\n        peg$c71 = function () {\n      return false;\n    },\n        peg$c72 = function (a) {\n      return a + \":\";\n    },\n        peg$c73 = \"<\",\n        peg$c74 = peg$literalExpectation(\"<\", false),\n        peg$c75 = /^[^\\0- <>\"{}|\\^`\\\\]/,\n        peg$c76 = peg$classExpectation([[\"\\0\", \" \"], \"<\", \">\", \"\\\"\", \"{\", \"}\", \"|\", \"^\", \"`\", \"\\\\\"], true, false),\n        peg$c77 = \">\",\n        peg$c78 = peg$literalExpectation(\">\", false),\n        peg$c79 = function (a) {\n      const decoded = a.map(s => {\n        if (0x10000 <= s.codePointAt(0) && s.codePointAt(0) <= 0xeffff) return 'a';\n        if (s.length === 1) return s;\n        if (s.length === 6) return String.fromCharCode(\"0x\" + s.substring(2));\n        if (s.length === 10) return String.fromCodePoint(\"0x\" + s.substring(2));\n        return s;\n      }).join(\"\");\n\n      if (decoded.match(/^[^\\u0000-\\u0020<>\"{}|^`\\\\]*$/)) {\n        var join = a.join(\"\");\n\n        try {\n          return context.resolve(join);\n        } catch (e) {\n          error(\"Invalid IRIREF \" + join);\n        }\n      } else error(\"Invalid IRIREF \" + a.join(\"\") + \" / \" + decoded);\n    },\n        peg$c80 = \":\",\n        peg$c81 = peg$literalExpectation(\":\", false),\n        peg$c82 = function (a) {\n      a = a || \"0\";\n      if (context.hasPrefix(a) === false) error(\"undefined prefix \" + a);\n      return a;\n    },\n        peg$c83 = function (a) {\n      return a || \"\";\n    },\n        peg$c84 = function (a, b) {\n      context.increment(a);\n      return context.resolve(a + \":\" + b);\n    },\n        peg$c85 = \"_:\",\n        peg$c86 = peg$literalExpectation(\"_:\", false),\n        peg$c87 = /^[0-9]/,\n        peg$c88 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n        peg$c89 = \"@\",\n        peg$c90 = peg$literalExpectation(\"@\", false),\n        peg$c91 = /^[a-zA-Z]/,\n        peg$c92 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"]], false, false),\n        peg$c93 = \"-\",\n        peg$c94 = peg$literalExpectation(\"-\", false),\n        peg$c95 = /^[a-zA-Z0-9]/,\n        peg$c96 = peg$classExpectation([[\"a\", \"z\"], [\"A\", \"Z\"], [\"0\", \"9\"]], false, false),\n        peg$c97 = function (a, s) {\n      return '-' + s.join(\"\");\n    },\n        peg$c98 = function (a, b) {\n      return a.join(\"\") + b.join(\"\");\n    },\n        peg$c99 = /^[+\\-]/,\n        peg$c100 = peg$classExpectation([\"+\", \"-\"], false, false),\n        peg$c101 = function (a) {\n      if (a.match(/^[0+][0-9]+$/)) return {\n        \"@value\": a,\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#integer\"\n      };\n      return parseInt(a);\n    },\n        peg$c102 = function (a) {\n      return {\n        \"@value\": a,\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#decimal\"\n      };\n    },\n        peg$c103 = function (a) {\n      return {\n        \"@value\": a,\n        \"@type\": \"http://www.w3.org/2001/XMLSchema#double\"\n      };\n    },\n        peg$c104 = /^[eE]/,\n        peg$c105 = peg$classExpectation([\"e\", \"E\"], false, false),\n        peg$c106 = \"\\\"\",\n        peg$c107 = peg$literalExpectation(\"\\\"\", false),\n        peg$c108 = /^[^\"\\\\\\n\\r]/,\n        peg$c109 = peg$classExpectation([\"\\\"\", \"\\\\\", \"\\n\", \"\\r\"], true, false),\n        peg$c110 = \"'\",\n        peg$c111 = peg$literalExpectation(\"'\", false),\n        peg$c112 = /^[^'\\\\\\n\\r]/,\n        peg$c113 = peg$classExpectation([\"'\", \"\\\\\", \"\\n\", \"\\r\"], true, false),\n        peg$c114 = \"'''\",\n        peg$c115 = peg$literalExpectation(\"'''\", false),\n        peg$c116 = /^[^'\\\\]/,\n        peg$c117 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n        peg$c118 = \"''\",\n        peg$c119 = peg$literalExpectation(\"''\", false),\n        peg$c120 = function (head, a) {\n      return \"''\" + a.join(\"\");\n    },\n        peg$c121 = function (head, a) {\n      return \"'\" + a.join(\"\");\n    },\n        peg$c122 = function (head, body) {\n      return head.join(\"\") + body.join(\"\");\n    },\n        peg$c123 = \"\\\"\\\"\\\"\",\n        peg$c124 = peg$literalExpectation(\"\\\"\\\"\\\"\", false),\n        peg$c125 = /^[^\"\\\\]/,\n        peg$c126 = peg$classExpectation([\"\\\"\", \"\\\\\"], true, false),\n        peg$c127 = \"\\\"\\\"\",\n        peg$c128 = peg$literalExpectation(\"\\\"\\\"\", false),\n        peg$c129 = function (head, a) {\n      return '\"\"' + a.join(\"\");\n    },\n        peg$c130 = function (head, a) {\n      return '\"' + a.join(\"\");\n    },\n        peg$c131 = \"\\\\U\",\n        peg$c132 = peg$literalExpectation(\"\\\\U\", false),\n        peg$c133 = function (hex) {\n      return String.fromCodePoint(parseInt(hex.join(\"\"), 16));\n    },\n        peg$c134 = \"\\\\u\",\n        peg$c135 = peg$literalExpectation(\"\\\\u\", false),\n        peg$c136 = function (hex) {\n      return String.fromCharCode(parseInt(hex.join(\"\"), 16));\n    },\n        peg$c137 = \"\\\\t\",\n        peg$c138 = peg$literalExpectation(\"\\\\t\", false),\n        peg$c139 = function () {\n      return '\\t';\n    },\n        peg$c140 = \"\\\\b\",\n        peg$c141 = peg$literalExpectation(\"\\\\b\", false),\n        peg$c142 = function () {\n      return '\\b';\n    },\n        peg$c143 = \"\\\\n\",\n        peg$c144 = peg$literalExpectation(\"\\\\n\", false),\n        peg$c145 = function () {\n      return '\\n';\n    },\n        peg$c146 = \"\\\\r\",\n        peg$c147 = peg$literalExpectation(\"\\\\r\", false),\n        peg$c148 = function () {\n      return '\\r';\n    },\n        peg$c149 = \"\\\\f\",\n        peg$c150 = peg$literalExpectation(\"\\\\f\", false),\n        peg$c151 = function () {\n      return '\\f';\n    },\n        peg$c152 = \"\\\\\\\"\",\n        peg$c153 = peg$literalExpectation(\"\\\\\\\"\", false),\n        peg$c154 = function () {\n      return '\"';\n    },\n        peg$c155 = \"\\\\'\",\n        peg$c156 = peg$literalExpectation(\"\\\\'\", false),\n        peg$c157 = function () {\n      return \"'\";\n    },\n        peg$c158 = \"\\\\\\\\\",\n        peg$c159 = peg$literalExpectation(\"\\\\\\\\\", false),\n        peg$c160 = function () {\n      return '\\\\';\n    },\n        peg$c161 = /^[ \\t\\r\\n]/,\n        peg$c162 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n        peg$c163 = function () {\n      return \"[]\";\n    },\n        peg$c164 = /^[\\uD800-\\uDBFF]/,\n        peg$c165 = peg$classExpectation([[\"\\uD800\", \"\\uDBFF\"]], false, false),\n        peg$c166 = /^[\\uDC00-\\uDFFF]/,\n        peg$c167 = peg$classExpectation([[\"\\uDC00\", \"\\uDFFF\"]], false, false),\n        peg$c168 = function (a, b) {\n      return a + b;\n    },\n        peg$c169 = /^[A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,\n        peg$c170 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"\\xC0\", \"\\xD6\"], [\"\\xD8\", \"\\xF6\"], [\"\\xF8\", \"\\u02FF\"], [\"\\u0370\", \"\\u037D\"], [\"\\u037F\", \"\\u1FFF\"], [\"\\u200C\", \"\\u200D\"], [\"\\u2070\", \"\\u218F\"], [\"\\u2C00\", \"\\u2FEF\"], [\"\\u3001\", \"\\uD7FF\"], [\"\\uF900\", \"\\uFDCF\"], [\"\\uFDF0\", \"\\uFFFD\"]], false, false),\n        peg$c171 = \"_\",\n        peg$c172 = peg$literalExpectation(\"_\", false),\n        peg$c173 = \"\\xB7\",\n        peg$c174 = peg$literalExpectation(\"\\xB7\", false),\n        peg$c175 = /^[\\u0300-\\u036F]/,\n        peg$c176 = peg$classExpectation([[\"\\u0300\", \"\\u036F\"]], false, false),\n        peg$c177 = /^[\\u203F-\\u2040]/,\n        peg$c178 = peg$classExpectation([[\"\\u203F\", \"\\u2040\"]], false, false),\n        peg$c179 = function (head, body, a, b) {\n      return a.join(\"\") + b.join(\"\");\n    },\n        peg$c180 = function (head, body, tail) {\n      return head + body.join(\"\") + tail.join(\"\");\n    },\n        peg$c181 = \"%\",\n        peg$c182 = peg$literalExpectation(\"%\", false),\n        peg$c183 = /^[0-9A-Fa-f]/,\n        peg$c184 = peg$classExpectation([[\"0\", \"9\"], [\"A\", \"F\"], [\"a\", \"f\"]], false, false),\n        peg$c185 = \"\\\\\",\n        peg$c186 = peg$literalExpectation(\"\\\\\", false),\n        peg$c187 = /^[_~.!$&'()*+,;=\\/?#@%\\-]/,\n        peg$c188 = peg$classExpectation([\"_\", \"~\", \".\", \"!\", \"$\", \"&\", \"'\", \"(\", \")\", \"*\", \"+\", \",\", \";\", \"=\", \"/\", \"?\", \"#\", \"@\", \"%\", \"-\"], false, false),\n        peg$currPos = 0,\n        peg$savedPos = 0,\n        peg$posDetailsCache = [{\n      line: 1,\n      column: 1\n    }],\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n      throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n    }\n\n    function error(message, location) {\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n      throw peg$buildSimpleError(message, location);\n    }\n\n    function peg$literalExpectation(text, ignoreCase) {\n      return {\n        type: \"literal\",\n        text: text,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$classExpectation(parts, inverted, ignoreCase) {\n      return {\n        type: \"class\",\n        parts: parts,\n        inverted: inverted,\n        ignoreCase: ignoreCase\n      };\n    }\n\n    function peg$anyExpectation() {\n      return {\n        type: \"any\"\n      };\n    }\n\n    function peg$endExpectation() {\n      return {\n        type: \"end\"\n      };\n    }\n\n    function peg$otherExpectation(description) {\n      return {\n        type: \"other\",\n        description: description\n      };\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column\n        };\n\n        while (p < pos) {\n          if (input.charCodeAt(p) === 10) {\n            details.line++;\n            details.column = 1;\n          } else {\n            details.column++;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails = peg$computePosDetails(endPos);\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildSimpleError(message, location) {\n      return new peg$SyntaxError(message, null, null, location);\n    }\n\n    function peg$buildStructuredError(expected, found, location) {\n      return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n    }\n\n    function peg$parseturtleDoc() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsestatement();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsestatement();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseIGNORE();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseIGNORE();\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsestatement() {\n      var s0, s1, s2, s3;\n      s0 = peg$parsedirective();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsetriples();\n\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseIGNORE();\n\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseIGNORE();\n          }\n\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s3 = peg$c1;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n              }\n            }\n\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c3(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseCOMMENT() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c4;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c5);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c6.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c7);\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c6.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c7);\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s3 = peg$c8;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c9);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseIGNORE() {\n      var s0;\n      s0 = peg$parseWS();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseCOMMENT();\n      }\n\n      return s0;\n    }\n\n    function peg$parsedirective() {\n      var s0;\n      s0 = peg$parseprefixID();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebase();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesparqlPrefix();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsesparqlBase();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseprefixID() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c11) {\n          s2 = peg$c11;\n          peg$currPos += 7;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c12);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseIGNORE();\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseIGNORE();\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsePNAME_NS_NO_CHECK();\n\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseIGNORE();\n\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseIGNORE();\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseIRIREF();\n\n                if (s6 !== peg$FAILED) {\n                  s7 = [];\n                  s8 = peg$parseIGNORE();\n\n                  while (s8 !== peg$FAILED) {\n                    s7.push(s8);\n                    s8 = peg$parseIGNORE();\n                  }\n\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 46) {\n                      s8 = peg$c1;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c2);\n                      }\n                    }\n\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c13(s4, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsebase() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c14) {\n          s2 = peg$c14;\n          peg$currPos += 5;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c15);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseIGNORE();\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseIGNORE();\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseIRIREF();\n\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseIGNORE();\n\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseIGNORE();\n              }\n\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s6 = peg$c1;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c2);\n                  }\n                }\n\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c16(s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesparqlBase() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (peg$c17.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (peg$c19.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c20);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (peg$c21.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c22);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              if (peg$c23.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c24);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n                s7 = peg$parseIGNORE();\n\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parseIGNORE();\n                }\n\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseIRIREF();\n\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c16(s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsesparqlPrefix() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (peg$c25.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c26);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (peg$c27.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c28);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (peg$c23.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c24);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              if (peg$c29.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c30);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                if (peg$c31.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c32);\n                  }\n                }\n\n                if (s6 !== peg$FAILED) {\n                  if (peg$c33.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c34);\n                    }\n                  }\n\n                  if (s7 !== peg$FAILED) {\n                    s8 = [];\n                    s9 = peg$parseIGNORE();\n\n                    while (s9 !== peg$FAILED) {\n                      s8.push(s9);\n                      s9 = peg$parseIGNORE();\n                    }\n\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsePNAME_NS_NO_CHECK();\n\n                      if (s9 !== peg$FAILED) {\n                        s10 = [];\n                        s11 = peg$parseIGNORE();\n\n                        while (s11 !== peg$FAILED) {\n                          s10.push(s11);\n                          s11 = peg$parseIGNORE();\n                        }\n\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseIRIREF();\n\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c13(s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsetriples() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = peg$parsesubject();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepredicateObjectList();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c35(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseblankNodePropertyList();\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepredicateObjectList();\n\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c36(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicateObjectList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n      s0 = peg$currPos;\n      s1 = peg$parseverb();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectList();\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = [];\n          s6 = peg$parseIGNORE();\n\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parseIGNORE();\n          }\n\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 59) {\n              s6 = peg$c37;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c38);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              s8 = peg$parseverb();\n\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseobjectList();\n\n                if (s9 !== peg$FAILED) {\n                  peg$savedPos = s7;\n                  s8 = peg$c39(s1, s2, s8, s9);\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n\n              if (s7 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c40(s1, s2, s7);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = [];\n            s6 = peg$parseIGNORE();\n\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parseIGNORE();\n            }\n\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 59) {\n                s6 = peg$c37;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c38);\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseverb();\n\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseobjectList();\n\n                  if (s9 !== peg$FAILED) {\n                    peg$savedPos = s7;\n                    s8 = peg$c39(s1, s2, s8, s9);\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s5 = peg$c40(s1, s2, s7);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c41(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseobjectList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      s1 = peg$parseobject();\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = [];\n        s5 = peg$parseIGNORE();\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          s5 = peg$parseIGNORE();\n        }\n\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c42;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c43);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseobject();\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s3;\n              s4 = peg$c44(s1, s6);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$parseIGNORE();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parseIGNORE();\n          }\n\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c42;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c43);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseobject();\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s3;\n                s4 = peg$c44(s1, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c45(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseverb() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = peg$parsepredicate();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c3(s1);\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseIGNORE();\n\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseIGNORE();\n        }\n\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 97) {\n            s2 = peg$c46;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c47);\n            }\n          }\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c48();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesubject() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parsecollection();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c49(s1);\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseBlankNode();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseiri();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsepredicate() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseiri();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseobject() {\n      var s0, s1;\n      s0 = peg$parseliteral();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecollection();\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c50(s1);\n        }\n\n        s0 = s1;\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseBlankNode();\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c51(s1);\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseblankNodePropertyList();\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c3(s1);\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseiri();\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c52(s1);\n              }\n\n              s0 = s1;\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseliteral() {\n      var s0;\n      s0 = peg$parseRDFLiteral();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNumericLiteral();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseBooleanLiteral();\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseblankNodePropertyList() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s2 = peg$c53;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c54);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsepredicateObjectList();\n\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseIGNORE();\n\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseIGNORE();\n            }\n\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c55;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c56);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c3(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsecollection() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c57;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c58);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseobject();\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseobject();\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseIGNORE();\n\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseIGNORE();\n            }\n\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s5 = peg$c59;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c60);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseNumericLiteral() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseDOUBLE();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseDECIMAL();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseINTEGER();\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseRDFLiteral() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseString();\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseIGNORE();\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseIGNORE();\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseLANGTAG();\n\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c62(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseIGNORE();\n\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseIGNORE();\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseString();\n\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseIGNORE();\n\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseIGNORE();\n            }\n\n            if (s3 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c63) {\n                s4 = peg$c63;\n                peg$currPos += 2;\n              } else {\n                s4 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c64);\n                }\n              }\n\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$parseIGNORE();\n\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseIGNORE();\n                }\n\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseiri();\n\n                  if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c65(s2, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$parseIGNORE();\n\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseIGNORE();\n          }\n\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseString();\n\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c3(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseBooleanLiteral() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c66) {\n          s2 = peg$c66;\n          peg$currPos += 4;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c67);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c68();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseIGNORE();\n\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseIGNORE();\n        }\n\n        if (s1 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 5) === peg$c69) {\n            s2 = peg$c69;\n            peg$currPos += 5;\n          } else {\n            s2 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c70);\n            }\n          }\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c71();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseString() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseSTRING_LITERAL_LONG_SINGLE_QUOTE();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseSTRING_LITERAL_LONG_QUOTE();\n\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseSTRING_LITERAL_SINGLE_QUOTE();\n\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseSTRING_LITERAL_QUOTE();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseiri() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseIRIREF();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseIGNORE();\n\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseIGNORE();\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsePrefixedName();\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c3(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsePrefixedName() {\n      var s0, s1;\n      s0 = peg$parsePNAME_LN();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsePNAME_NS();\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c72(s1);\n        }\n\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseBlankNode() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseIGNORE();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseIGNORE();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseBLANK_NODE_LABEL();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseIGNORE();\n\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseIGNORE();\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseANON();\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c3(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseIRIREF() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s1 = peg$c73;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c74);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c75.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c76);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseUCHAR();\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c75.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c76);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseUCHAR();\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 62) {\n            s3 = peg$c77;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c78);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c79(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePNAME_NS() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = peg$parsePN_PREFIX();\n\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c80;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c81);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c82(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePNAME_NS_NO_CHECK() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = peg$parsePN_PREFIX();\n\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s2 = peg$c80;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c81);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c83(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePNAME_LN() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = peg$parsePNAME_NS();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsePN_LOCAL();\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c84(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseBLANK_NODE_LABEL() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c85) {\n        s2 = peg$c85;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c86);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsePN_CHARS_U();\n\n        if (s3 === peg$FAILED) {\n          if (peg$c87.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c88);\n            }\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsePN_CHARS();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsePN_CHARS();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$currPos;\n            s7 = [];\n\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s8 = peg$c1;\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n              }\n            }\n\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s8 = peg$c1;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c2);\n                  }\n                }\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n\n            if (s7 !== peg$FAILED) {\n              s8 = [];\n              s9 = peg$parsePN_CHARS();\n\n              if (s9 !== peg$FAILED) {\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n                  s9 = peg$parsePN_CHARS();\n                }\n              } else {\n                s8 = peg$FAILED;\n              }\n\n              if (s8 !== peg$FAILED) {\n                s7 = [s7, s8];\n                s6 = s7;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$currPos;\n              s7 = [];\n\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s8 = peg$c1;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c2);\n                }\n              }\n\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n\n                  if (input.charCodeAt(peg$currPos) === 46) {\n                    s8 = peg$c1;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c2);\n                    }\n                  }\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n\n              if (s7 !== peg$FAILED) {\n                s8 = [];\n                s9 = peg$parsePN_CHARS();\n\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    s9 = peg$parsePN_CHARS();\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n\n                if (s8 !== peg$FAILED) {\n                  s7 = [s7, s8];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseLANGTAG() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s1 = peg$c89;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c90);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c91.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c92);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n\n            if (peg$c91.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c92);\n              }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s5 = peg$c93;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c94);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n\n            if (peg$c95.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c96);\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (peg$c95.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c96);\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c97(s2, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s5 = peg$c93;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c94);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n\n              if (peg$c95.test(input.charAt(peg$currPos))) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c96);\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n\n                  if (peg$c95.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c96);\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c97(s2, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c98(s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseINTEGER() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n\n      if (peg$c99.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c100);\n        }\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n\n        if (peg$c87.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c88);\n          }\n        }\n\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c101(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseDECIMAL() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n\n      if (peg$c99.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c100);\n        }\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n\n        if (peg$c87.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c88);\n          }\n        }\n\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n\n          if (peg$c87.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c88);\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s5 = peg$c1;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c2);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (peg$c87.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c88);\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseDOUBLE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n\n      if (peg$c99.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c100);\n        }\n      }\n\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$currPos;\n        s5 = [];\n\n        if (peg$c87.test(input.charAt(peg$currPos))) {\n          s6 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s6 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c88);\n          }\n        }\n\n        if (s6 !== peg$FAILED) {\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n          }\n        } else {\n          s5 = peg$FAILED;\n        }\n\n        if (s5 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s6 = peg$c1;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c2);\n            }\n          }\n\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n\n            while (s8 !== peg$FAILED) {\n              s7.push(s8);\n\n              if (peg$c87.test(input.charAt(peg$currPos))) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c88);\n                }\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parseEXPONENT();\n\n              if (s8 !== peg$FAILED) {\n                s5 = [s5, s6, s7, s8];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n\n        if (s4 === peg$FAILED) {\n          s4 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s5 = peg$c1;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c2);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (peg$c87.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c88);\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseEXPONENT();\n\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = [];\n\n            if (peg$c87.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c88);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n\n                if (peg$c87.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c88);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseEXPONENT();\n\n              if (s6 !== peg$FAILED) {\n                s5 = [s5, s6];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s1 = input.substring(s1, peg$currPos);\n      } else {\n        s1 = s2;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c103(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseEXPONENT() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (peg$c104.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c105);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c99.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c100);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n\n          if (peg$c87.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c88);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n\n              if (peg$c87.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c88);\n                }\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSTRING_LITERAL_QUOTE() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s1 = peg$c106;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c107);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c108.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c109);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseECHAR();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseUCHAR();\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c108.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c109);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseECHAR();\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseUCHAR();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c106;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c107);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSTRING_LITERAL_SINGLE_QUOTE() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s1 = peg$c110;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c111);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c112.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c113);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseECHAR();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseUCHAR();\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c112.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c113);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseECHAR();\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseUCHAR();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c110;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c111);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c10(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSTRING_LITERAL_LONG_SINGLE_QUOTE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 3) === peg$c114) {\n        s1 = peg$c114;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c115);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c116.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c117);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseECHAR();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseUCHAR();\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c116.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c117);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseECHAR();\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseUCHAR();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c118) {\n            s5 = peg$c118;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c119);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n\n            if (peg$c116.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c117);\n              }\n            }\n\n            if (s7 === peg$FAILED) {\n              s7 = peg$parseECHAR();\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseUCHAR();\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (peg$c116.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c117);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseECHAR();\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseUCHAR();\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c120(s2, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s5 = peg$c110;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c111);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n\n              if (peg$c116.test(input.charAt(peg$currPos))) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c117);\n                }\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseECHAR();\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseUCHAR();\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n\n                  if (peg$c116.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c117);\n                    }\n                  }\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseECHAR();\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseUCHAR();\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c121(s2, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c118) {\n              s5 = peg$c118;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c119);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n\n              if (peg$c116.test(input.charAt(peg$currPos))) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c117);\n                }\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseECHAR();\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseUCHAR();\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n\n                  if (peg$c116.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c117);\n                    }\n                  }\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseECHAR();\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseUCHAR();\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c120(s2, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n\n            if (s4 === peg$FAILED) {\n              s4 = peg$currPos;\n\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s5 = peg$c110;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c111);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n\n                if (peg$c116.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c117);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseECHAR();\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseUCHAR();\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  while (s7 !== peg$FAILED) {\n                    s6.push(s7);\n\n                    if (peg$c116.test(input.charAt(peg$currPos))) {\n                      s7 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c117);\n                      }\n                    }\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseECHAR();\n\n                      if (s7 === peg$FAILED) {\n                        s7 = peg$parseUCHAR();\n                      }\n                    }\n                  }\n                } else {\n                  s6 = peg$FAILED;\n                }\n\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s5 = peg$c121(s2, s6);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c114) {\n              s4 = peg$c114;\n              peg$currPos += 3;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c115);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c122(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseSTRING_LITERAL_LONG_QUOTE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 3) === peg$c123) {\n        s1 = peg$c123;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c124);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n\n        if (peg$c125.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c126);\n          }\n        }\n\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseECHAR();\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseUCHAR();\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c125.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c126);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseECHAR();\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseUCHAR();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c127) {\n            s5 = peg$c127;\n            peg$currPos += 2;\n          } else {\n            s5 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c128);\n            }\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n\n            if (peg$c125.test(input.charAt(peg$currPos))) {\n              s7 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c126);\n              }\n            }\n\n            if (s7 === peg$FAILED) {\n              s7 = peg$parseECHAR();\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseUCHAR();\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (peg$c125.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c126);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseECHAR();\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseUCHAR();\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c129(s2, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = peg$currPos;\n\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s5 = peg$c106;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c107);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n\n              if (peg$c125.test(input.charAt(peg$currPos))) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c126);\n                }\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseECHAR();\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseUCHAR();\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n\n                  if (peg$c125.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c126);\n                    }\n                  }\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseECHAR();\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseUCHAR();\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c130(s2, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c127) {\n              s5 = peg$c127;\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c128);\n              }\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n\n              if (peg$c125.test(input.charAt(peg$currPos))) {\n                s7 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c126);\n                }\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parseECHAR();\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseUCHAR();\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n\n                  if (peg$c125.test(input.charAt(peg$currPos))) {\n                    s7 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c126);\n                    }\n                  }\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseECHAR();\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseUCHAR();\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c129(s2, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n\n            if (s4 === peg$FAILED) {\n              s4 = peg$currPos;\n\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s5 = peg$c106;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c107);\n                }\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = [];\n\n                if (peg$c125.test(input.charAt(peg$currPos))) {\n                  s7 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c126);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseECHAR();\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parseUCHAR();\n                  }\n                }\n\n                if (s7 !== peg$FAILED) {\n                  while (s7 !== peg$FAILED) {\n                    s6.push(s7);\n\n                    if (peg$c125.test(input.charAt(peg$currPos))) {\n                      s7 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c126);\n                      }\n                    }\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseECHAR();\n\n                      if (s7 === peg$FAILED) {\n                        s7 = peg$parseUCHAR();\n                      }\n                    }\n                  }\n                } else {\n                  s6 = peg$FAILED;\n                }\n\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s4;\n                  s5 = peg$c130(s2, s6);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c123) {\n              s4 = peg$c123;\n              peg$currPos += 3;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c124);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c122(s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseUCHAR() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c131) {\n        s1 = peg$c131;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c132);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parseHEX();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseHEX();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseHEX();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseHEX();\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseHEX();\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseHEX();\n\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseHEX();\n\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseHEX();\n\n                      if (s10 !== peg$FAILED) {\n                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];\n                        s2 = s3;\n                      } else {\n                        peg$currPos = s2;\n                        s2 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s2;\n                      s2 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c133(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.substr(peg$currPos, 2) === peg$c134) {\n          s1 = peg$c134;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c135);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseHEX();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseHEX();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseHEX();\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseHEX();\n\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c136(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseECHAR() {\n      var s0, s1;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 2) === peg$c137) {\n        s1 = peg$c137;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c138);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c139();\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.substr(peg$currPos, 2) === peg$c140) {\n          s1 = peg$c140;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c141);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c142();\n        }\n\n        s0 = s1;\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c143) {\n            s1 = peg$c143;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c144);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c145();\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c146) {\n              s1 = peg$c146;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c147);\n              }\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c148();\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n\n              if (input.substr(peg$currPos, 2) === peg$c149) {\n                s1 = peg$c149;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c150);\n                }\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c151();\n              }\n\n              s0 = s1;\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n\n                if (input.substr(peg$currPos, 2) === peg$c152) {\n                  s1 = peg$c152;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c153);\n                  }\n                }\n\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c154();\n                }\n\n                s0 = s1;\n\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n\n                  if (input.substr(peg$currPos, 2) === peg$c155) {\n                    s1 = peg$c155;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c156);\n                    }\n                  }\n\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c157();\n                  }\n\n                  s0 = s1;\n\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n\n                    if (input.substr(peg$currPos, 2) === peg$c158) {\n                      s1 = peg$c158;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c159);\n                      }\n                    }\n\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c160();\n                    }\n\n                    s0 = s1;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseWS() {\n      var s0;\n\n      if (peg$c161.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c162);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseANON() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c53;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c54);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseIGNORE();\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseIGNORE();\n        }\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c55;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c56);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c163();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_CHARS_BASE() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n\n      if (peg$c164.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c165);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (peg$c166.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c167);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c168(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      if (s0 === peg$FAILED) {\n        if (peg$c169.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c170);\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_CHARS_U() {\n      var s0;\n      s0 = peg$parsePN_CHARS_BASE();\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 95) {\n          s0 = peg$c171;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c172);\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_CHARS() {\n      var s0;\n      s0 = peg$parsePN_CHARS_U();\n\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s0 = peg$c93;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c94);\n          }\n        }\n\n        if (s0 === peg$FAILED) {\n          if (peg$c87.test(input.charAt(peg$currPos))) {\n            s0 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c88);\n            }\n          }\n\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 183) {\n              s0 = peg$c173;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c174);\n              }\n            }\n\n            if (s0 === peg$FAILED) {\n              if (peg$c175.test(input.charAt(peg$currPos))) {\n                s0 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c176);\n                }\n              }\n\n              if (s0 === peg$FAILED) {\n                if (peg$c177.test(input.charAt(peg$currPos))) {\n                  s0 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s0 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c178);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_PREFIX() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsePN_CHARS_BASE();\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsePN_CHARS();\n\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsePN_CHARS();\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = [];\n\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s7 = peg$c1;\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c2);\n            }\n          }\n\n          if (s7 !== peg$FAILED) {\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s7 = peg$c1;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c2);\n                }\n              }\n            }\n          } else {\n            s6 = peg$FAILED;\n          }\n\n          if (s6 !== peg$FAILED) {\n            s7 = [];\n            s8 = peg$parsePN_CHARS();\n\n            if (s8 !== peg$FAILED) {\n              while (s8 !== peg$FAILED) {\n                s7.push(s8);\n                s8 = peg$parsePN_CHARS();\n              }\n            } else {\n              s7 = peg$FAILED;\n            }\n\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = [];\n\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s7 = peg$c1;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s7 = peg$c1;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c2);\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              s7 = [];\n              s8 = peg$parsePN_CHARS();\n\n              if (s8 !== peg$FAILED) {\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsePN_CHARS();\n                }\n              } else {\n                s7 = peg$FAILED;\n              }\n\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_LOCAL() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n      s0 = peg$currPos;\n      s1 = peg$parsePN_CHARS_U();\n\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 58) {\n          s1 = peg$c80;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c81);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (peg$c87.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c88);\n            }\n          }\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsePLX();\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsePN_CHARS();\n\n        if (s3 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c80;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c81);\n            }\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsePLX();\n          }\n        }\n\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsePN_CHARS();\n\n          if (s3 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 58) {\n              s3 = peg$c80;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c81);\n              }\n            }\n\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsePLX();\n            }\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = [];\n\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s6 = peg$c1;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c2);\n            }\n          }\n\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s6 = peg$c1;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c2);\n                }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n            s7 = peg$parsePN_CHARS();\n\n            if (s7 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 58) {\n                s7 = peg$c80;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c81);\n                }\n              }\n\n              if (s7 === peg$FAILED) {\n                s7 = peg$parsePLX();\n              }\n            }\n\n            if (s7 !== peg$FAILED) {\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsePN_CHARS();\n\n                if (s7 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 58) {\n                    s7 = peg$c80;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c81);\n                    }\n                  }\n\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$parsePLX();\n                  }\n                }\n              }\n            } else {\n              s6 = peg$FAILED;\n            }\n\n            if (s6 !== peg$FAILED) {\n              peg$savedPos = s4;\n              s5 = peg$c179(s1, s2, s5, s6);\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = [];\n\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s6 = peg$c1;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c2);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s6 = peg$c1;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c2);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsePN_CHARS();\n\n              if (s7 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                  s7 = peg$c80;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c81);\n                  }\n                }\n\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parsePLX();\n                }\n              }\n\n              if (s7 !== peg$FAILED) {\n                while (s7 !== peg$FAILED) {\n                  s6.push(s7);\n                  s7 = peg$parsePN_CHARS();\n\n                  if (s7 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 58) {\n                      s7 = peg$c80;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c81);\n                      }\n                    }\n\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parsePLX();\n                    }\n                  }\n                }\n              } else {\n                s6 = peg$FAILED;\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s4;\n                s5 = peg$c179(s1, s2, s5, s6);\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c180(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsePLX() {\n      var s0;\n      s0 = peg$parsePERCENT();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsePN_LOCAL_ESC();\n      }\n\n      return s0;\n    }\n\n    function peg$parsePERCENT() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 37) {\n        s2 = peg$c181;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c182);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseHEX();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseHEX();\n\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      return s0;\n    }\n\n    function peg$parseHEX() {\n      var s0;\n\n      if (peg$c183.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c184);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsePN_LOCAL_ESC() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c185;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c186);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        if (peg$c187.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c188);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c3(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    var URL = typeof require === 'undefined' ? URL : require(\"url\").URL;\n\n    function createObject(property, value) {\n      var a = {};\n      a[property] = value;\n      return a;\n    }\n\n    var context = {\n      base: [],\n      data: {},\n      addBase: function (uri) {\n        if (context.base.length === 0) {\n          context.base.push(uri);\n          return;\n        }\n\n        const last = context.base[context.base.length - 1];\n        if (last !== uri) context.base.push(new URL(uri, last).toString());\n      },\n      addPrefix: function (prefix, uri) {\n        const list = context.data[prefix];\n\n        if (list === undefined) {\n          context.data[prefix] = [{\n            uri: uri,\n            count: 0\n          }];\n        } else if (list[list.length - 1].uri !== uri) {\n          list.push({\n            uri: uri,\n            count: 0\n          });\n        }\n      },\n      hasPrefix: function (prefix) {\n        return this.data[prefix] !== undefined;\n      },\n      resolve: function (pname, force) {\n        const prefix = Object.keys(context.data).find(key => pname.indexOf(key + \":\") === 0);\n\n        if (prefix !== undefined) {\n          const list = context.data[prefix];\n          if (list.length === 1 && force !== true) return pname;\n          const uri = list[list.length - 1].uri;\n          return pname.replace(prefix + \":\", uri);\n        } else {\n          var base = context.base.length === 0 ? options.baseIRI : context.base[context.base.length - 1];\n          if (!base || pname.match(/^(http:|https:|urn:|file:)/)) return pname;\n          if (pname.indexOf(\"//\") === 0 && base) return base.split(\"//\")[0] + pname;\n          return new URL(pname, base).toString();\n        }\n      },\n      increment: function (prefix) {\n        const list = context.data[prefix];\n        if (list !== undefined) list[list.length - 1].count++;\n      },\n      decrement: function (prefix) {\n        const list = context.data[prefix];\n        if (list !== undefined) list[list.length - 1].count--;\n      },\n      toJSON: function () {\n        const root = {};\n\n        if (context.base.length > 0) {\n          if (root[\"@context\"] === undefined) root[\"@context\"] = {};\n          root[\"@context\"][\"@base\"] = context.base[0];\n        }\n\n        Object.keys(context.data).forEach(key => {\n          const head = context.data[key][0];\n          if (head.uri === \"http://www.w3.org/2001/XMLSchema#\" && head.count < 1) return;\n          if (root[\"@context\"] === undefined) root[\"@context\"] = {};\n          root[\"@context\"][key] = head.uri;\n        });\n        return root;\n      }\n    };\n\n    function expandList(container, force) {\n      if (container[\"@list\"] === undefined) return container;\n      if (!force && !container[\"@list\"].find(x => x[\"@list\"] !== undefined)) return container;\n      if (container[\"@list\"].length === 0) return {\n        \"@id\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil\"\n      };\n      var root = {};\n      var focus = null;\n      container[\"@list\"].forEach(b => {\n        if (focus === null) focus = root;else {\n          focus[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\"] = {};\n          focus = focus[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\"];\n        }\n        focus[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#first\"] = expandList(b, true);\n        focus[\"http://www.w3.org/1999/02/22-rdf-syntax-ns#rest\"] = {\n          \"@id\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil\"\n        };\n      });\n      return root;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail(peg$endExpectation());\n      }\n\n      throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n});","map":null,"metadata":{},"sourceType":"script"}