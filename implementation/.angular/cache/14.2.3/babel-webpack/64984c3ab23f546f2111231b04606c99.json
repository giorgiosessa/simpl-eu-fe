{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { CustomValidators } from '@validations/custom-validators';\nimport * as i0 from \"@angular/core\";\nexport let ValidationControlService = /*#__PURE__*/(() => {\n  class ValidationControlService {\n    getValidation(validation) {\n      let validator;\n\n      switch (validation.key) {\n        case 'minLength':\n          validator = Validators.minLength(validation.value);\n          break;\n\n        case 'maxLength':\n          validator = Validators.maxLength(validation.value);\n          break;\n\n        case 'minInclusive':\n          validator = Validators.min(validation.value);\n          break;\n\n        case 'maxInclusive':\n          validator = Validators.max(validation.value);\n          break;\n\n        case 'minExclusive':\n          validator = Validators.min(validation.value + 1);\n          break;\n\n        case 'maxExclusive':\n          validator = Validators.max(validation.value - 1);\n          break;\n\n        case 'pattern':\n          validator = Validators.pattern(validation.value);\n          break;\n\n        case 'lessThan':\n          validator = CustomValidators.lessThanValidator(validation.value);\n          break;\n      }\n\n      return validator;\n    }\n\n    getValidatorFn(input) {\n      const validator = [];\n      input.validations.forEach(validation => {\n        const specificValidation = this.getValidation(validation);\n\n        if (specificValidation !== undefined) {\n          validator.push(specificValidation);\n        }\n      });\n\n      if (input.required) {\n        validator.push(Validators.required);\n      }\n\n      if (typeof input.datatype.value === 'string') {\n        if (input.datatype !== undefined && input.datatype.value.toLowerCase().includes('uri')) {\n          validator.push(CustomValidators.uriPatternValidator());\n        }\n\n        if (input.datatype !== undefined && input.datatype.value.toLowerCase().includes('iri')) {\n          validator.push(CustomValidators.urlPatternValidator());\n        }\n      }\n\n      if (input.componentType === 'dynamicExpanded' && !input.selfLoop && input.required) {\n        validator.push(CustomValidators.checkChildrenValidity());\n      }\n\n      return validator;\n    }\n\n  }\n\n  ValidationControlService.ɵfac = function ValidationControlService_Factory(t) {\n    return new (t || ValidationControlService)();\n  };\n\n  ValidationControlService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidationControlService,\n    factory: ValidationControlService.ɵfac,\n    providedIn: 'root'\n  });\n  return ValidationControlService;\n})();","map":null,"metadata":{},"sourceType":"module"}