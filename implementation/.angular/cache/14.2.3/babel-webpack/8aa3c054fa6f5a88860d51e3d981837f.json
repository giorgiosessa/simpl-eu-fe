{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let NumericDirective = /*#__PURE__*/(() => {\n  class NumericDirective {\n    constructor(el) {\n      this.el = el;\n    }\n\n    onKeyDown(event) {\n      this.run(this.el.nativeElement.value);\n    }\n\n    onPaste(event) {\n      this.run(this.el.nativeElement.value);\n    }\n\n    check(value) {\n      if (this.decimals <= 0) {\n        return String(value).match(new RegExp(/^\\d+$/));\n      } else {\n        const regExpString = '^\\\\s*((\\\\d+(\\\\.\\\\d{0,' + this.decimals + '})?)|((\\\\d*(\\\\.\\\\d{1,' + this.decimals + '}))))\\\\s*$';\n        return String(value).match(new RegExp(regExpString));\n      }\n    }\n\n    run(oldValue) {\n      setTimeout(() => {\n        const currentValue = this.el.nativeElement.value;\n\n        if (currentValue !== '' && !this.check(currentValue)) {\n          this.el.nativeElement.value = oldValue;\n        }\n      });\n    }\n\n  }\n\n  NumericDirective.ɵfac = function NumericDirective_Factory(t) {\n    return new (t || NumericDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NumericDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NumericDirective,\n    selectors: [[\"\", \"appNumeric\", \"\"]],\n    hostBindings: function NumericDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function NumericDirective_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        })(\"paste\", function NumericDirective_paste_HostBindingHandler($event) {\n          return ctx.onPaste($event);\n        });\n      }\n    },\n    inputs: {\n      decimals: \"decimals\"\n    }\n  });\n  return NumericDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}