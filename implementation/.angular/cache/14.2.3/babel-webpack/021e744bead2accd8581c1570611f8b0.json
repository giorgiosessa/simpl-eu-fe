{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Utils } from '@shared/utils';\nimport { environment } from 'src/environments/environment';\nimport Data from '../mock/form.mock.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ngx-translate/core\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(httpClient, translate) {\n      this.httpClient = httpClient;\n      this.translate = translate;\n    }\n\n    getFieldContraints(acceptType = 'application/json') {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': acceptType\n        })\n      };\n      return this.httpClient.get(`${environment.apiUrl}/demo`);\n    } // Can be used for development\n\n\n    getFieldsFromFile() {\n      return Data;\n    }\n\n    upload(file) {\n      const apiUrl = Utils.controlUrl(environment.apiUrl);\n      const data = new FormData();\n      data.append('file', file);\n      return this.httpClient.post(`${apiUrl}/convertFile`, data);\n    }\n\n    getFiles() {\n      const apiUrl = Utils.controlUrl(environment.apiUrl);\n      return this.httpClient.get(`${apiUrl}/getAvailableShapes`);\n    }\n\n    getFilesCategorized(system) {\n      const apiUrl = Utils.controlUrl(environment.apiUrl);\n      return this.httpClient.get(`${apiUrl}/getAvailableShapesCategorized?ecosystem=` + system);\n    }\n\n    getJSON(ecosystem, name) {\n      const apiUrl = Utils.controlUrl(environment.apiUrl);\n      const params = new HttpParams().set('ecosystem', ecosystem).set('name', name); //incase of choosing language through the link .set('lan',this.translate.currentLang)\n\n      return this.httpClient.get(`${apiUrl}/getJSON`, {\n        params\n      });\n    }\n\n  }\n\n  ApiService.ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TranslateService));\n  };\n\n  ApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}