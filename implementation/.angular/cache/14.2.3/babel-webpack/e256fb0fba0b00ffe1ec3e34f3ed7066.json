{"ast":null,"code":"import { HttpRequest, HttpErrorResponse, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable, EMPTY } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(dialog) {\n      this.dialog = dialog;\n    }\n\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(error => {\n        if (error.error instanceof Error) {\n          // A client-side or network error occurred. Handle it accordingly.\n          console.error('An error occurred:', error.error.message);\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops...',\n            text: 'Something went wrong!',\n            footer: 'Please check your network connection!' + error.error.message\n          });\n          throw Error(\"The app component has thrown an error!\");\n        } else {\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          Swal.fire({\n            icon: 'error',\n            title: 'Error occurred.',\n            text: error.error\n          });\n          console.error(`Backend returned code ${error.status}, body was: ${error.error}`);\n          throw Error(\"The app component has thrown an error!\");\n        } //to return a new response:\n        //return of(new HttpResponse({body: [{name: \"Default value...\"}]}));\n        //to return the error on the upper level:\n        //return throwError(error);\n        // return nothing:\n\n\n        return EMPTY;\n      }));\n    }\n\n  }\n\n  HttpErrorInterceptor.ɵfac = function HttpErrorInterceptor_Factory(t) {\n    return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.MatDialog));\n  };\n\n  HttpErrorInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorInterceptor,\n    factory: HttpErrorInterceptor.ɵfac\n  });\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}