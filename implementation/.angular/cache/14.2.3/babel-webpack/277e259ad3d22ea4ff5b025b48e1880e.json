{"ast":null,"code":"import { FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction ShowErrorsComponent_div_0_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const error_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", error_r3, \" \");\n  }\n}\n\nfunction ShowErrorsComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ShowErrorsComponent_div_0_small_1_Template, 2, 1, \"small\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.listOfErrors());\n  }\n}\n\nfunction ShowErrorsComponent_div_1_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const error_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", error_r5, \" \");\n  }\n}\n\nfunction ShowErrorsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, ShowErrorsComponent_div_1_small_1_Template, 2, 1, \"small\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.listOfErrors());\n  }\n}\n\nexport let ShowErrorsComponent = /*#__PURE__*/(() => {\n  class ShowErrorsComponent {\n    constructor() {\n      this.form = new FormGroup({});\n      this.allErrors = [];\n      this.ERROR_MESSAGE = {\n        required: () => `${this.label} is required.`,\n        minlength: par => `${this.label} must be minimum ${par.requiredLength} characters.`,\n        maxlength: par => `${this.label} must be maximum ${par.requiredLength} characters.`,\n        min: par => `The minimum value of ${this.label} must be ${par.min}.`,\n        max: par => `The maximum value of ${this.label} must be ${par.max}.`,\n        pattern: par => `The pattern allowed ${par.requiredPattern}`,\n        lessthan: par => `The value must be less than ${par}.`,\n        uriPattern: () => `The value must be a URI.`,\n        urlPattern: () => `The value must be a URL.`,\n        childrenValid: () => `${this.label} is required.`\n      };\n    }\n\n    ngOnInit() {\n      if (this.displayAll) {\n        this.allErrors = this.listOfAllErrors([], this.formField, this.form);\n      }\n    }\n\n    shouldShowErrors() {\n      return this.ctrl && this.ctrl.errors && this.ctrl.touched && !(this.ctrl instanceof FormGroup);\n    }\n\n    shouldShowShapesErrors() {\n      return this.ctrl && this.ctrl.errors && this.ctrl instanceof FormGroup;\n    }\n\n    listOfErrors() {\n      if (this.ctrl && this.ctrl.errors) {\n        return Object.keys(this.ctrl.errors).map(err => this.ERROR_MESSAGE[err](this.ctrl.getError(err)));\n      }\n    }\n\n    listOfAllErrors(result, formField, formGroup) {\n      if (formField.childrenSchema === '') {\n        this.label = formField.name; // Get errors when single dynamic input\n\n        const ctrlAll = formGroup.get(formField.id);\n        const controlErrors = formGroup.get(formField.id).errors;\n\n        if (controlErrors) {\n          result.push(Object.keys(controlErrors).map(err => this.ERROR_MESSAGE[err](ctrlAll.getError(err))));\n        } // Get erros when array dynamic input\n\n\n        const controls = ctrlAll.controls;\n\n        if (controls !== undefined && controls.length > 0) {\n          controls.forEach(element => {\n            const controlErrorsElement = element.errors;\n\n            if (controlErrorsElement) {\n              result.push(Object.keys(controlErrorsElement).map(err => this.ERROR_MESSAGE[err](element.getError(err))));\n            }\n          });\n        }\n      } else {\n        if (formField.required) {\n          const nestedformGroup = formGroup.get(formField.id);\n          const controlErrors = formGroup.get(formField.id).errors;\n\n          if (controlErrors) {\n            result.push(Object.keys(controlErrors).map(err => this.ERROR_MESSAGE[err](nestedformGroup.getError(err))));\n          }\n\n          formField.childrenFields.forEach(childrenField => {\n            this.listOfAllErrors(result, childrenField, nestedformGroup);\n          });\n        }\n      }\n\n      return result;\n    }\n\n  }\n\n  ShowErrorsComponent.ɵfac = function ShowErrorsComponent_Factory(t) {\n    return new (t || ShowErrorsComponent)();\n  };\n\n  ShowErrorsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ShowErrorsComponent,\n    selectors: [[\"app-show-errors\"]],\n    inputs: {\n      ctrl: \"ctrl\",\n      ctrlAll: \"ctrlAll\",\n      label: \"label\",\n      displayAll: \"displayAll\",\n      formField: \"formField\",\n      form: \"form\"\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function ShowErrorsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ShowErrorsComponent_div_0_Template, 2, 1, \"div\", 0);\n        i0.ɵɵtemplate(1, ShowErrorsComponent_div_1_Template, 2, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.shouldShowErrors());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.shouldShowShapesErrors());\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf]\n  });\n  return ShowErrorsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}