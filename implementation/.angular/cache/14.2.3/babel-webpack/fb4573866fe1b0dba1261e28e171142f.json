{"ast":null,"code":"import { FormArray, FormControl, FormGroup } from '@angular/forms';\nexport let Utils = /*#__PURE__*/(() => {\n  class Utils {\n    static groupBy(list, getKey) {\n      const map = new Map();\n      list === null || list === void 0 ? void 0 : list.forEach(item => {\n        const key = getKey(item);\n        const collection = map.get(key);\n\n        if (!collection) {\n          map.set(key, [item]);\n        } else {\n          collection.push(item);\n        }\n      });\n      return Array.from(map.values());\n    } // Deep clones the given AbstractControl, preserving values, validators, async validators, and disabled status.\n\n\n    static cloneAbstractControl(control) {\n      let newControl;\n\n      if (control instanceof FormGroup) {\n        const formGroup = new FormGroup({}, control.validator, control.asyncValidator);\n        const controls = control.controls;\n        Object.keys(controls).forEach(key => {\n          formGroup.addControl(key, this.cloneAbstractControl(controls[key]));\n        });\n        newControl = formGroup;\n      } else if (control instanceof FormArray) {\n        const formArray = new FormArray([], control.validator, control.asyncValidator);\n        control.controls.forEach(formControl => formArray.push(this.cloneAbstractControl(formControl)));\n        newControl = formArray;\n      } else if (control instanceof FormControl) {\n        newControl = new FormControl(control.value, control.validator, control.asyncValidator);\n      } else {\n        throw new Error('Error: unexpected control value');\n      }\n\n      if (control.disabled) {\n        newControl.disable({\n          emitEvent: false\n        });\n      }\n\n      return newControl;\n    }\n\n    static getRandomValue() {\n      return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n\n    static getDistinctObjects(fields) {\n      const distinctObjects = fields.filter((thing, i, arr) => arr.findIndex(t => t.key === thing.key) === i);\n      return distinctObjects;\n    }\n\n    static controlUrl(api) {\n      let result = '';\n\n      if (api.includes('http') || api.includes('https')) {\n        result = api;\n      } else {\n        result = `http://${api}`;\n      }\n\n      return result;\n    }\n\n    static removeAfterCharacter(input, character = '.') {\n      input = input.substring(0, input.indexOf(character));\n      return input;\n    }\n\n  }\n\n  Utils.filterInPlace = (array, predicate) => {\n    let end = 0;\n    array.forEach(obj => {\n      if (predicate(obj)) {\n        array[end++] = obj;\n      }\n    });\n    array.length = end;\n  };\n\n  Utils.hasRequiredField = abstractControl => {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({});\n\n      if (validator && validator.required) {\n        return true;\n      }\n    }\n\n    if (abstractControl['controls']) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (Utils.hasRequiredField(abstractControl['controls'][controlName])) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  return Utils;\n})();","map":null,"metadata":{},"sourceType":"module"}