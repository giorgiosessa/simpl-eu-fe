{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, ViewContainerRef, Component, ViewChild, ContentChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"outlet\"];\nlet NgxRerenderDirective = /*#__PURE__*/(() => {\n  class NgxRerenderDirective {\n    constructor(templateRef, viewContainer) {\n      this.templateRef = templateRef;\n      this.viewContainer = viewContainer;\n    }\n\n    set mcRerender(_val) {\n      this.viewContainer.clear();\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    }\n\n  }\n\n  NgxRerenderDirective.ɵfac = function NgxRerenderDirective_Factory(t) {\n    return new (t || NgxRerenderDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n\n  NgxRerenderDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxRerenderDirective,\n    selectors: [[\"\", \"mcRerender\", \"\"]],\n    inputs: {\n      mcRerender: \"mcRerender\"\n    }\n  });\n  return NgxRerenderDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxRerenderContentDirective = /*#__PURE__*/(() => {\n  class NgxRerenderContentDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  NgxRerenderContentDirective.ɵfac = function NgxRerenderContentDirective_Factory(t) {\n    return new (t || NgxRerenderContentDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n  };\n\n  NgxRerenderContentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NgxRerenderContentDirective,\n    selectors: [[\"\", \"mcRerenderContent\", \"\"]]\n  });\n  return NgxRerenderContentDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxRerenderComponent = /*#__PURE__*/(() => {\n  class NgxRerenderComponent {\n    constructor() {\n      this.triggerChange = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      if (!changes.trigger || changes.trigger.currentValue === undefined) {\n        return;\n      }\n\n      const triggerValue = changes.trigger.currentValue;\n\n      if (!this.outletRef) {\n        /**\n         * Even if the initial outlet is not yet ready on the first onChange\n         * we still ne to reset the boolean binding,\n         * otherwise the next change to true will not properly be tracked\n         */\n        if (typeof triggerValue === 'boolean') {\n          this.setBooleanBindingToFalse();\n        }\n\n        return;\n      }\n\n      if (typeof triggerValue !== 'boolean') {\n        this.rerender();\n        return;\n      }\n\n      if (triggerValue) {\n        this.rerender();\n        this.setBooleanBindingToFalse();\n      }\n    }\n\n    rerender() {\n      if (!this.outletRef) {\n        return;\n      }\n\n      this.outletRef.clear();\n      this.outletRef.createEmbeddedView(this.content.templateRef);\n    }\n\n    setBooleanBindingToFalse() {\n      setTimeout(() => this.triggerChange.emit(false));\n    }\n\n  }\n\n  NgxRerenderComponent.ɵfac = function NgxRerenderComponent_Factory(t) {\n    return new (t || NgxRerenderComponent)();\n  };\n\n  NgxRerenderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxRerenderComponent,\n    selectors: [[\"mc-rerender\"]],\n    contentQueries: function NgxRerenderComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, NgxRerenderContentDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);\n      }\n    },\n    viewQuery: function NgxRerenderComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.outletRef = _t.first);\n      }\n    },\n    inputs: {\n      trigger: \"trigger\"\n    },\n    outputs: {\n      triggerChange: \"triggerChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"ngTemplateOutlet\"], [\"outlet\", \"\"]],\n    template: function NgxRerenderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0, 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.content.templateRef);\n      }\n    },\n    dependencies: [i1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return NgxRerenderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxRerenderModule = /*#__PURE__*/(() => {\n  class NgxRerenderModule {}\n\n  NgxRerenderModule.ɵfac = function NgxRerenderModule_Factory(t) {\n    return new (t || NgxRerenderModule)();\n  };\n\n  NgxRerenderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxRerenderModule\n  });\n  NgxRerenderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return NgxRerenderModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-rerender\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxRerenderComponent, NgxRerenderContentDirective, NgxRerenderDirective, NgxRerenderModule }; //# sourceMappingURL=ngx-rerender.mjs.map","map":null,"metadata":{},"sourceType":"module"}